@using UrunStok1.Data
@page "/"


@inject UrunServices service

<div class="container">
    <div class="form-inline">


        <label class="sr-only " for="filter">Search </label>
        <input type="text" class="form-control mb-2 mr-sm-2" id="parentValue" @bind="@searchName" />

        
        <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="SearchUrunData" > Search  </button>


    </div>
    <div class="row bg-light">
        <table class="table table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Urun Id</th>
                    
                    <th class="sort-th" @onclick="@(() => SortTable("UrunAdi"))">
                        Urun Adi
                        <span class="fa @(SetSortIcon("UrunAdi"))"></span>
                    </th>
                    
                    <th class="sort-th" @onclick="@(() => SortTable("Stok"))">
                        Stok
                        <span class="fa @(SetSortIcon("Stok"))"></span>
                    </th>
                    <th>Aciklama</th>
                    <th class="sort-th" @onclick="@(() => SortTable("Fiyat"))">
                        Fiyat
                        <span class="fa @(SetSortIcon("Fiyat"))"></span>
                        
                    </th>
                    <th>Delete Urun</th>
                </tr>
            </thead>
            <tbody>
                @if (Urunler.Any())
                {
                    @foreach (var urun in Urunler)
                    {
                <tr @onclick="(() => SetUrunForUpdate(urun))">
                    <td>@urun.Id</td>
                    <td>@urun.UrunAdi</td>                   
                    <td>@urun.Stok</td>
                    <td>@urun.Aciklama</td>
                    <td>@urun.Fiyat</td>
                    <td><button class="btn btn-danger" @onclick="(() => DeleteUrun(urun))">Delete</button></td>
                </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No urun available</strong></td></tr>
                }
            </tbody>
            
        </table>

    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Urun</div>

            <EditForm Model="@NewUrun">
                <div class="form-group">
                    <label for="UrunAdi">Urun Adı</label>
                    <input type="text" id="urunAdi" class="form-control" @bind-value="@NewUrun.UrunAdi" />
                </div>

                <div class="form-group">
                    <label for="Stok">Stok</label>
                    <input type="text" id="Stok" class="form-control" @bind="@NewUrun.Stok" />
                </div>

                <div class="form-group">
                    <label for="Aciklama">Açıklama</label>
                    <input type="text" id="Aciklama" class="form-control" @bind="@NewUrun.Aciklama" />
                </div>

                <div class="form-group">
                    <label for="Fiyat">Fiyat</label>
                    <input type="text" id="Fiyat" class="form-control" @bind="@NewUrun.Fiyat" />
                </div>


                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewUrun"> Add Urun</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Urun</div>

            <EditForm Model="@UpdateUrun">
                <div class="form-group">
                    <label for="UrunAdi">Urun Adı</label>
                    <input type="text" id="UrunAdi" class="form-control" @bind-value="@UpdateUrun.UrunAdi" />
                </div>

                <div class="form-group">
                    <label for="Stok">Stok</label>
                    <input type="text" id="Stok" class="form-control" @bind="@UpdateUrun.Stok" />
                </div>

                <div class="form-group">
                    <label for="Aciklama">Açıklama</label>
                    <input type="text" id="Aciklama" class="form-control" @bind="@UpdateUrun.Aciklama" />
                </div>

                <div class="form-group">
                    <label for="Fiyat">Fiyat</label>
                    <input type="text" id="Fiyat" class="form-control" @bind="@UpdateUrun.Fiyat" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateUrunData"> Update Urun</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {


    List<Urun> Urunler = new List<Urun>();

    string searchName = "";

    //arama fonksiyonu

    private async Task SearchUrunData()
    {
        await RefresUrunler();

        if (searchName != "")
            Urunler = Urunler.Where<Urun>(x => x.UrunAdi.Contains(searchName.ToString())).ToList<Urun>();

    }

    //----------sıralama işlemleri
    private bool isSortedAscending;
    private string activeSortColumn;

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            Urunler = Urunler.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;

        }
        else
        {
            if (isSortedAscending)
            {
                Urunler = Urunler.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                Urunler = Urunler.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    //---
    protected override async Task OnInitializedAsync()
    {
        await RefresUrunler();
    }

    private async Task RefresUrunler()
    {
        Urunler = await service.GetUrunAsync();
    }

    public Urun NewUrun { get; set; } = new Urun();
    private async Task AddNewUrun()
    {
        await service.AddUrunAsync(NewUrun);
        NewUrun = new Urun();
        await RefresUrunler();
    }

    Urun UpdateUrun = new Urun();
    private void SetUrunForUpdate(Urun urun)
    {
        UpdateUrun = urun;
    }

    private async Task UpdateUrunData()
    {
        await service.UpdateUrunAsync(UpdateUrun);
        await RefresUrunler();
    }

    private async Task DeleteUrun(Urun urun)
    {
        await service.DeleteUrunAsync(urun);
        await RefresUrunler();
    }
}



